package rkp;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class ProgressBar extends JFrame{

private static final long serialVersionUID = 5365912754290051188L;
FileInputStream input;
FileOutputStream output;
String d;
boolean cancel=true;
public ProgressBar()
{
setSize(500,500);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
setVisible(true);
setLayout(new FlowLayout());
JLabel l1=new JLabel("Source File:-");
add(l1);
JTextField j1=new JTextField(30);
add(j1);
JLabel l2=new JLabel("Destination File:-");
add(l2);
JTextField j2=new JTextField(30);
add(j2);
JButton b1=new JButton("COPY");
JButton b2=new JButton("STOP");
add(b1);
add(b2);
JProgressBar pb=new JProgressBar(0,1000);
add(pb);

JTextArea j3=new JTextArea(40,40);
add(j3);

b1.addActionListener(new ActionListener() {

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub	
		String src=j1.getText();
		String des=j2.getText();
		d=des;
		
		try {
			input=new FileInputStream(new File(src));
			output=new FileOutputStream(new File(des));
			byte buffer[]=new byte[5];
			BufferedInputStream in=new BufferedInputStream(input);
			BufferedOutputStream out=new BufferedOutputStream(output);
			int length;
			//pb.setStringPainted(true);
			//pb.setIndeterminate(true);
			pb.setVisible(true);
			pb.setValue(0);
			pb.setMaximum(100);
			long filesize=in.available();
			long bytesread=0;
			int copyprogress=0;
			//pb.setString("COPYING.....");
			while((length=input.read(buffer,0,buffer.length))!=-1)
			{	
				output.write(buffer,0,length);
				bytesread=bytesread+length;
				Thread.sleep(1);
				copyprogress=(int)((bytesread*100.0)/filesize);
				pb.setValue(copyprogress);
				if(cancel==false)
					return;
			}
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} 
		
	}
	
});
b2.addActionListener(new ActionListener() {

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		cancel=false;
		//pb.setVisible(false);
		//pb.setIndeterminate(false);
		b1.setEnabled(false);
		b2.setEnabled(false);
		j1.setEditable(false);
		j2.setEditable(false);
		try {
		String content=new String(Files.readAllBytes(Paths.get(d)));
		j3.setText(content);
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
	}
	
});

}

public static void main(String []args)
{
	
		new ProgressBar();
	
}
}
package rkp;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class ProgressBar extends JFrame{

private static final long serialVersionUID = 5365912754290051188L;
FileInputStream input;
FileOutputStream output;
String d;
boolean cancel=true;
public ProgressBar()
{
setSize(500,500);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
setVisible(true);
setLayout(new FlowLayout());
JLabel l1=new JLabel("Source File:-");
add(l1);
JTextField j1=new JTextField(30);
add(j1);
JLabel l2=new JLabel("Destination File:-");
add(l2);
JTextField j2=new JTextField(30);
add(j2);
JButton b1=new JButton("COPY");
JButton b2=new JButton("STOP");
add(b1);
add(b2);
JProgressBar pb=new JProgressBar(0,1000);
add(pb);

JTextArea j3=new JTextArea(40,40);
add(j3);

b1.addActionListener(new ActionListener() {

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub	
		String src=j1.getText();
		String des=j2.getText();
		d=des;
		
		try {
			input=new FileInputStream(new File(src));
			output=new FileOutputStream(new File(des));
			byte buffer[]=new byte[5];
			BufferedInputStream in=new BufferedInputStream(input);
			BufferedOutputStream out=new BufferedOutputStream(output);
			int length;
			//pb.setStringPainted(true);
			//pb.setIndeterminate(true);
			pb.setVisible(true);
			pb.setValue(0);
			pb.setMaximum(100);
			long filesize=in.available();
			long bytesread=0;
			int copyprogress=0;
			//pb.setString("COPYING.....");
			while((length=input.read(buffer,0,buffer.length))!=-1)
			{	
				output.write(buffer,0,length);
				bytesread=bytesread+length;
				Thread.sleep(1);
				copyprogress=(int)((bytesread*100.0)/filesize);
				pb.setValue(copyprogress);
				if(cancel==false)
					return;
			}
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} 
		
	}
	
});
b2.addActionListener(new ActionListener() {

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		cancel=false;
		//pb.setVisible(false);
		//pb.setIndeterminate(false);
		b1.setEnabled(false);
		b2.setEnabled(false);
		j1.setEditable(false);
		j2.setEditable(false);
		try {
		String content=new String(Files.readAllBytes(Paths.get(d)));
		j3.setText(content);
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
	}
	
});

}

public static void main(String []args)
{
	
		new ProgressBar();
	
}
}
package rkp;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class ProgressBar extends JFrame{

private static final long serialVersionUID = 5365912754290051188L;
FileInputStream input;
FileOutputStream output;
String d;
boolean cancel=true;
public ProgressBar()
{
setSize(500,500);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
setVisible(true);
setLayout(new FlowLayout());
JLabel l1=new JLabel("Source File:-");
add(l1);
JTextField j1=new JTextField(30);
add(j1);
JLabel l2=new JLabel("Destination File:-");
add(l2);
JTextField j2=new JTextField(30);
add(j2);
JButton b1=new JButton("COPY");
JButton b2=new JButton("STOP");
add(b1);
add(b2);
JProgressBar pb=new JProgressBar(0,1000);
add(pb);

JTextArea j3=new JTextArea(40,40);
add(j3);

b1.addActionListener(new ActionListener() {

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub	
		String src=j1.getText();
		String des=j2.getText();
		d=des;
		
		try {
			input=new FileInputStream(new